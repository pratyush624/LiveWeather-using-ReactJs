{"version":3,"sources":["weatherapi.js","App.js","reportWebVitals.js","index.js"],"names":["getWeatherData","cityname","a","axios","get","data","App","useState","weatherData","setWeatherData","city","setCity","loading","setLoading","getData","console","log","message","useEffect","className","type","value","onChange","e","target","placeholder","onClick","css","size","color","src","weather","icon","alt","main","parseFloat","temp","toFixed","name","sys","country","temp_min","temp_max","humidity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKaA,EAAc,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAELC,IAAMC,IALf,kDAK0B,YAAQH,EAAR,kBAJ3B,qCAEe,uBAEnBI,EAFmB,EAEnBA,KAFmB,kBAGnBA,GAHmB,oGAAH,sD,eCiGZC,MAhGf,WACE,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAS,aAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAO,uCAAG,4BAAAZ,EAAA,sEAEZW,GAAW,GAFC,SAGOb,EAAeU,GAHtB,OAGNL,EAHM,OAIZI,EAAeJ,GAEfQ,GAAW,GANC,gDAQZE,QAAQC,IAAI,KAAMC,SAClBJ,GAAW,GATC,yDAAH,qDAsBb,OAJAK,qBAAU,WACRJ,MACC,IAGD,qBAAKK,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,QAAd,SACE,mBAAGA,UAAU,cAAb,2BAEF,sBAAKA,UAAU,cAAf,UACE,uBACEC,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOH,QAClCI,YAAY,yBAEd,wBAAQL,KAAK,SAASM,QAAS,kBAAMZ,KAArC,uBAKDF,EACC,qBAAKO,UAAU,mBAAf,SACE,cAAC,cAAD,CACEQ,IA9BE,4DA+BFC,KAAM,IACNC,MAAO,OACPjB,QAASA,MAIb,mCACmB,OAAhBJ,EACC,sBAAKW,UAAU,iBAAf,UACE,wDACA,qBAAKA,UAAU,eAAf,SACE,qBACEW,IAAG,0CAAqCtB,EAAYuB,QAAQ,GAAGC,KAA5D,QACHC,IAAI,cAGR,6BAAKzB,EAAYuB,QAAQ,GAAGG,OAC5B,qBAAKf,UAAU,cAAf,SACE,+BACGgB,WAAW3B,EAAY0B,KAAKE,KAAO,QAAQC,QAAQ,GADtD,aAKF,qBAAKlB,UAAU,WAAf,SACE,+BACE,mBAAGA,UAAU,sBACZX,EAAY8B,KAFf,MAEwB9B,EAAY+B,IAAIC,aAG1C,qBAAKrB,UAAU,oBAAf,SACE,sCACO,IACJgB,WAAW3B,EAAY0B,KAAKO,SAAW,QAAQJ,QAAQ,GAF1D,gBAGiB,IACdF,WAAW3B,EAAY0B,KAAKQ,SAAW,QAAQL,QAAQ,GAJ1D,sBAKuB7B,EAAY0B,KAAKS,SALxC,IAKmD,YAIrD,aClFDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63407275.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://api.openweathermap.org/data/2.5/weather?\";\r\nconst apiKey = \"7ce934af099025072871fce329d264b4\";\r\n\r\nexport const getWeatherData = async (cityname) => {\r\n  try {\r\n    const {data} = await axios.get(baseUrl + `q=${cityname}&appid=${apiKey}`);\r\n    return data\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { getWeatherData } from \"./weatherapi\";\n\nimport { ScaleLoader } from \"react-spinners\";\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\"Bangalore\");\n  const [loading, setLoading] = useState(false);\n\n  const getData = async () => {\n    try {\n      setLoading(true);\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      // console.log(data);\n      setLoading(false);\n    } catch (error) {\n      console.log(error.message);\n      setLoading(false);\n    }\n  };\n\n  const override = `display:block;\n  margin:0 auto;\n  border-color:red;\n  `;\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        <h2 className=\"title\">\n          <i className=\"fa fa-cloud\">Weather App</i>\n        </h2>\n        <div className=\"search-form\">\n          <input\n            type=\"text\"\n            value={city}\n            onChange={(e) => setCity(e.target.value)}\n            placeholder=\"Enter your city name\"\n          />\n          <button type=\"button\" onClick={() => getData()}>\n            Search\n          </button>\n        </div>\n\n        {loading ? (\n          <div className=\"loader-container\">\n            <ScaleLoader\n              css={override}\n              size={200}\n              color={\"#fff\"}\n              loading={loading}\n            />\n          </div>\n        ) : (\n          <>\n            {weatherData !== null ? (\n              <div className=\"main-container\">\n                <h4>Live Weather Condition</h4>\n                <div className=\"weather-icon\">\n                  <img\n                    src={`http://openweathermap.org/img/w/${weatherData.weather[0].icon}.png`}\n                    alt=\"imgicon\"\n                  />\n                </div>\n                <h3>{weatherData.weather[0].main}</h3>\n                <div className=\"temperature\">\n                  <h1>\n                    {parseFloat(weatherData.main.temp - 273.15).toFixed(1)}\n                    &deg;C\n                  </h1>\n                </div>\n                <div className=\"location\">\n                  <h3>\n                    <i className=\"fa fa-street-view\"></i>\n                    {weatherData.name} | {weatherData.sys.country}\n                  </h3>\n                </div>\n                <div className=\"temperature-range\">\n                  <h5>\n                    Min:{\" \"}\n                    {parseFloat(weatherData.main.temp_min - 273.15).toFixed(1)}\n                    &deg;C || Max:{\" \"}\n                    {parseFloat(weatherData.main.temp_max - 273.15).toFixed(1)}\n                    &deg;C || Humidity: {weatherData.main.humidity}%{\" \"}\n                  </h5>\n                </div>\n              </div>\n            ) : null}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}